#include <iostream>
#include <time.h>
#include <random>

using namespace std;
void fast_sort(int *A, int n);

int main()
{
    int n, proverka;
    cout << "Введите количество элементов в массиве: ";
    cin >> n;
    int A[n];
    int i;
    srand(time(NULL));
    
    for (i = 0; i < n; i++)
    {
        A[i] = 1 + rand() % 20;
    }
    
    for (i = 0; i < n; i++)
    {
        cout<<A[i]<<" ";
    }

    cout << endl << "Как будем сортировать массив?(1 - пузырьковый, 2 - вставками, 3 - слиянием, 4 - шейкерной, 5 - шелла, 6 - быстрой)"<< endl;
    cin >> proverka;
    
    switch(proverka)
    {
        case 1:
            int temp; //временная переменная
            for (int i = 0; i < n - 1; i++) 
            {
                for (int j = 0; j < n - i - 1; j++) 
                {
                    if (A[j] > A[j + 1]) 
                    {
                        temp = A[j];
                        A[j] = A[j + 1];
                        A[j + 1] = temp;
                    }
                }
            }
            for (i = 0; i < n; i++)
            {
                cout<<A[i]<<" ";
            }
            break;
        case 2:
            int temp1, last; // временная переменная, индекс прошлого элемента
            for (int i = 1; i < n; i++)
            {
                temp1 = A[i]; 
                last = i-1; 
                while(last >= 0 && A[last] > temp1)
                {
                    A[last + 1] = A[last];
                    A[last] = temp1;
                    last--;
                }
            }
            for (i = 0; i < n; i++)
            {
                cout<<A[i]<<" ";
            }
            break;
        //case 3:
        case 4:
        {
            bool check = true;
            int r = n - 1;
            int l = 1;
            do 
            {
            bool check = true;
            for (int i = l; i <= r; i++) 
            {
              if (A[i - 1] > A[i]) 
              {
                swap(A[i - 1], A[i]);
                check = false;
              }
            }
            r--;
            for (int i = r; i >= l; i--) 
            {
              if (A[i] < A[i - 1]) 
              {
                swap (A[i], A[i - 1]);
                check = false;
              }
            }
            l++;
         } 
         while (check == false);
         for (i = 0; i < n; i++)
            {
                cout<<A[i]<<" ";
            }
        break;
        }
        case 5:
        {
            int i, j, step;
            int temp2;//временная переменная
            for (step = n / 2; step > 0; step = step / 2)
            {
                for (i = step; i < n; i++)
                {
                    temp2 = A[i];
                    for (j = i; j >= step; j = j - step)
                    {
                        if (temp2 < A[j - step])
                        {
                            A[j] = A[j - step];
                        }
                        else break;
                    }
                    A[j] = temp2;
                }
            }
            for (i = 0; i < n; i++)
            {
                cout<<A[i]<<" ";
            }
            break;
        }
        case 6:
            fast_sort(A, n);
            for (i = 0; i < n; i++)
            {
                cout<<A[i]<<" ";
            }
            break;
    }   
}
void fast_sort(int *A, int n)
{
    int i = 0;
            int j = n - 1;
            int middle = A[n/2];
            do 
            {
                while(A[i] < middle) 
                {
                    i++;
                }
                while(A[j] > middle) 
                {
                    j--;
                }
                if (i <= j) 
                {
                    int temp4 = A[i]; // temp4 - временная переменная
                    A[i] = A[j];
                    A[j] = temp4;
                    i++;
                    j--;
                }
            } 
            while (i <= j);
            
            if(j > 0) 
            {
                fast_sort(A, j + 1);
            }
            if (i < n) 
            {
                fast_sort(&A[i], n - i);
            }
}
